{"version":3,"sources":["../src/ctrl.js"],"names":["panelDefaults","seriesColumnIndex","measureColumnIndex","seriesColumnName","measureColumnName","seriesColorSuperset","seriesColors","keep","gap","sort","legend","isShowing","position","isFullWidth","isReverse","FunnelChartJsPanelCtrl","$scope","$injector","$rootScope","data","_","defaults","panel","events","on","onRender","bind","onInitEditMode","onDataReceived","onDataError","path","addEditorTab","render","dataList","length","isReal","type","columns","rows","columnTexts","map","col","text","slice","scope","elem","attrs","ctrl","panelColorIndex","color","each","obj","index","colName","toLowerCase","MetricsPanelCtrl","templateUrl"],"mappings":"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","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nconst panelDefaults = {\n  seriesColumnIndex: -1,\n  measureColumnIndex: -1,\n  seriesColumnName: null,\n  measureColumnName: null,\n  seriesColorSuperset: ['#299c46', '#5794F2', '#F2495C', '#FADE2A', '#FF9830', '#B877D9'],\n  seriesColors: [],\n  //seriesHoverColors: [],\n  keep: 'auto',\n  gap: 2,\n  sort: 'desc',\n  legend: {\n    isShowing: true,\n    position: 'top',\n    isFullWidth: false,\n    isReverse: false\n  }\n};\n\nexport class FunnelChartJsPanelCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n\n    this.$rootScope = $rootScope;\n    this.data = null;\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n  }\n\n  onRender() {\n  }\n\n  onInitEditMode() {\n    let path = 'public/plugins/chc-funnel-panel/partials/';\n    this.addEditorTab('Options', `${path}editor.html`, 2);\n  }\n\n  onDataError() {\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    if (dataList && dataList.length > 0) {\n      let data = dataList[0];\n      this.data = {\n        isReal: true,\n        type: data.type,\n        columns: data.columns,\n        rows: data.rows,\n        columnTexts: data.columns.map(col => 'string' === typeof col ? col : col.text)\n      };\n    }\n    else {\n      this.data = {\n        isReal: false,\n        type: 'table',\n        columns: [{text: \"Series\"}, {text: \"Value\"}],\n        rows: [\n          [ 'Green', 50 ],\n          [ 'Blue', 5 ],\n          [ 'Red', 30 ],\n          [ 'Yellow', 30 ]\n        ]\n      };\n    }\n\n    this.panel.seriesColors = _.slice(this.panel.seriesColorSuperset, 0, this.data.rows.length);\n\n    this.render();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n  onColorChange(panelColorIndex, type) {\n    return color => {\n      //if (type == 'hover')\n      //  this.panel.seriesHoverColors[panelColorIndex] = color;\n      //else\n        this.panel.seriesColors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  onColumnChange(type) {\n\n    _.each(this.data.columns, (obj, index) => {\n      var colName = this.panel.measureColumnName;\n      if (type == 'series') {\n        colName = this.panel.seriesColumnName;\n      }\n\n      if (obj.text.toLowerCase() == colName){\n        if (type == 'series') {\n          this.panel.seriesColumnIndex = index;\n        }else if (type == 'measure'){\n          this.panel.measureColumnIndex = index;\n        }\n      }\n\n      if (index == this.data.columns.length - 1)\n        this.render();\n    });\n  }\n}\n\nFunnelChartJsPanelCtrl.templateUrl = 'partials/module.html';\n"],"file":"ctrl.js"}