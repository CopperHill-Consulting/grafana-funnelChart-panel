{"version":3,"sources":["../src/ctrl.js"],"names":["panelDefaults","seriesColumnName","measureColumnName","seriesColors","seriesHoverColors","keep","gap","legend","isShowing","position","isFullWidth","isReverse","FunnelChartJsPanelCtrl","$scope","$injector","$rootScope","data","_","defaults","panel","events","on","onRender","bind","onInitEditMode","onDataReceived","onDataError","console","log","path","addEditorTab","render","dataList","length","isReal","type","columns","rows","columnTexts","map","col","text","scope","elem","attrs","ctrl","panelColorIndex","color","MetricsPanelCtrl","templateUrl"],"mappings":"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","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nconst panelDefaults = {\n  seriesColumnName: null,\n  measureColumnName: null,\n  seriesColors: ['#299c46'],\n  seriesHoverColors: ['#299c46'],\n  keep: 'auto',\n  gap: 2,\n  legend: {\n    isShowing: true,\n    position: 'top',\n    isFullWidth: false,\n    isReverse: false\n  }\n};\n\nexport class FunnelChartJsPanelCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n\n    this.$rootScope = $rootScope;\n    this.data = null;\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n\n    console.log(this);\n  }\n\n  onRender() {\n\n  }\n\n  onInitEditMode() {\n    let path = 'public/plugins/chc-funnel-panel/partials/';\n    this.addEditorTab('Options', `${path}editor.html`, 2);\n    this.addEditorTab('Colors', `${path}series-colors.html`, 3);\n  }\n\n  onDataError() {\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    if (dataList && dataList.length > 0) {\n      let data = dataList[0];\n      this.data = {\n        isReal: true,\n        type: data.type,\n        columns: data.columns,\n        rows: data.rows,\n        columnTexts: data.columns.map(col => 'string' === typeof col ? col : col.text)\n      };\n    }\n    else {\n      this.data = {\n        isReal: false,\n        type: 'table',\n        columns: [{text: \"Series\"}, {text: \"Value\"}],\n        rows: [\n          [ 'Green', 50 ],\n          [ 'Blue', 5 ],\n          [ 'Red', 30 ],\n          [ 'Yellow', 30 ]\n        ]\n      };\n    }\n\n    console.log(this.data);\n\n    this.render();\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n  onColorChange(panelColorIndex, type) {\n    return color => {\n      if (type == 'hover')\n        this.panel.seriesHoverColors[panelColorIndex] = color;\n      else\n        this.panel.seriesColors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n}\n\nFunnelChartJsPanelCtrl.templateUrl = 'partials/module.html';\n"],"file":"ctrl.js"}